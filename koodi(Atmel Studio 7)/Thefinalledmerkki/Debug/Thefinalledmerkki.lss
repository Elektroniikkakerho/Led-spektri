
Thefinalledmerkki.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000009cc  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a1  00800110  00800110  00000a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000112a  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b03  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ba  00000000  00000000  00002785  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00003140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d2  00000000  00000000  00003220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ee  00000000  00000000  000037f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec ec       	ldi	r30, 0xCC	; 204
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	24 e0       	ldi	r18, 0x04	; 4
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a1 3b       	cpi	r26, 0xB1	; 177
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 84 04 	call	0x908	; 0x908 <main>
  ea:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <tbl_window>:
  f2:	3d 0a       	sbc	r3, r29
  f4:	4f 0a       	sbc	r4, r31
  f6:	85 0a       	sbc	r8, r21
  f8:	e0 0a       	sbc	r14, r16
  fa:	5e 0b       	sbc	r21, r30
  fc:	01 0c       	add	r0, r1
  fe:	c6 0c       	add	r12, r6
 100:	ae 0d       	add	r26, r14
 102:	b8 0e       	add	r11, r24
 104:	e4 0f       	add	r30, r20
 106:	31 11       	cpse	r19, r1
 108:	9d 12       	cpse	r9, r29
 10a:	29 14       	cp	r2, r9
 10c:	d3 15       	cp	r29, r3
 10e:	9a 17       	cp	r25, r26
 110:	7d 19       	sub	r23, r13
 112:	7c 1b       	sub	r23, r28
 114:	93 1d       	adc	r25, r3
 116:	c4 1f       	adc	r28, r20
 118:	0b 22       	and	r0, r27
 11a:	68 24       	eor	r6, r8
 11c:	d9 26       	eor	r13, r25
 11e:	5c 29       	or	r21, r12
 120:	f1 2b       	or	r31, r17
 122:	96 2e       	mov	r9, r22
 124:	48 31       	cpi	r20, 0x18	; 24
 126:	06 34       	cpi	r16, 0x46	; 70
 128:	cf 36       	cpi	r28, 0x6F	; 111
 12a:	a1 39       	cpi	r26, 0x91	; 145
 12c:	7a 3c       	cpi	r23, 0xCA	; 202
 12e:	58 3f       	cpi	r21, 0xF8	; 248
 130:	3a 42       	sbci	r19, 0x2A	; 42
 132:	1e 45       	sbci	r17, 0x5E	; 94
 134:	01 48       	sbci	r16, 0x81	; 129
 136:	e3 4a       	sbci	r30, 0xA3	; 163
 138:	c1 4d       	sbci	r28, 0xD1	; 209
 13a:	9a 50       	subi	r25, 0x0A	; 10
 13c:	6c 53       	subi	r22, 0x3C	; 60
 13e:	35 56       	subi	r19, 0x65	; 101
 140:	f4 58       	subi	r31, 0x84	; 132
 142:	a6 5b       	subi	r26, 0xB6	; 182
 144:	4a 5e       	subi	r20, 0xEA	; 234
 146:	df 60       	ori	r29, 0x0F	; 15
 148:	63 63       	ori	r22, 0x33	; 51
 14a:	d4 65       	ori	r29, 0x54	; 84
 14c:	31 68       	ori	r19, 0x81	; 129
 14e:	78 6a       	ori	r23, 0xA8	; 168
 150:	a8 6c       	ori	r26, 0xC8	; 200
 152:	c0 6e       	ori	r28, 0xE0	; 224
 154:	be 70       	andi	r27, 0x0E	; 14
 156:	a1 72       	andi	r26, 0x21	; 33
 158:	68 74       	andi	r22, 0x48	; 72
 15a:	12 76       	andi	r17, 0x62	; 98
 15c:	9e 77       	andi	r25, 0x7E	; 126
 15e:	0b 79       	andi	r16, 0x9B	; 155
 160:	57 7a       	andi	r21, 0xA7	; 167
 162:	83 7b       	andi	r24, 0xB3	; 179
 164:	8d 7c       	andi	r24, 0xCD	; 205
 166:	75 7d       	andi	r23, 0xD5	; 213
 168:	3b 7e       	andi	r19, 0xEB	; 235
 16a:	dd 7e       	andi	r29, 0xED	; 237
 16c:	5b 7f       	andi	r21, 0xFB	; 251
 16e:	b6 7f       	andi	r27, 0xF6	; 246
 170:	ec 7f       	andi	r30, 0xFC	; 252
 172:	fe 7f       	andi	r31, 0xFE	; 254
 174:	ec 7f       	andi	r30, 0xFC	; 252
 176:	b6 7f       	andi	r27, 0xF6	; 246
 178:	5b 7f       	andi	r21, 0xFB	; 251
 17a:	dd 7e       	andi	r29, 0xED	; 237
 17c:	3b 7e       	andi	r19, 0xEB	; 235
 17e:	75 7d       	andi	r23, 0xD5	; 213
 180:	8d 7c       	andi	r24, 0xCD	; 205
 182:	83 7b       	andi	r24, 0xB3	; 179
 184:	57 7a       	andi	r21, 0xA7	; 167
 186:	0b 79       	andi	r16, 0x9B	; 155
 188:	9e 77       	andi	r25, 0x7E	; 126
 18a:	12 76       	andi	r17, 0x62	; 98
 18c:	68 74       	andi	r22, 0x48	; 72
 18e:	a1 72       	andi	r26, 0x21	; 33
 190:	be 70       	andi	r27, 0x0E	; 14
 192:	c0 6e       	ori	r28, 0xE0	; 224
 194:	a8 6c       	ori	r26, 0xC8	; 200
 196:	78 6a       	ori	r23, 0xA8	; 168
 198:	31 68       	ori	r19, 0x81	; 129
 19a:	d4 65       	ori	r29, 0x54	; 84
 19c:	63 63       	ori	r22, 0x33	; 51
 19e:	df 60       	ori	r29, 0x0F	; 15
 1a0:	4a 5e       	subi	r20, 0xEA	; 234
 1a2:	a6 5b       	subi	r26, 0xB6	; 182
 1a4:	f4 58       	subi	r31, 0x84	; 132
 1a6:	35 56       	subi	r19, 0x65	; 101
 1a8:	6c 53       	subi	r22, 0x3C	; 60
 1aa:	9a 50       	subi	r25, 0x0A	; 10
 1ac:	c1 4d       	sbci	r28, 0xD1	; 209
 1ae:	e3 4a       	sbci	r30, 0xA3	; 163
 1b0:	01 48       	sbci	r16, 0x81	; 129
 1b2:	1e 45       	sbci	r17, 0x5E	; 94
 1b4:	3a 42       	sbci	r19, 0x2A	; 42
 1b6:	58 3f       	cpi	r21, 0xF8	; 248
 1b8:	7a 3c       	cpi	r23, 0xCA	; 202
 1ba:	a1 39       	cpi	r26, 0x91	; 145
 1bc:	cf 36       	cpi	r28, 0x6F	; 111
 1be:	06 34       	cpi	r16, 0x46	; 70
 1c0:	48 31       	cpi	r20, 0x18	; 24
 1c2:	96 2e       	mov	r9, r22
 1c4:	f1 2b       	or	r31, r17
 1c6:	5c 29       	or	r21, r12
 1c8:	d9 26       	eor	r13, r25
 1ca:	68 24       	eor	r6, r8
 1cc:	0b 22       	and	r0, r27
 1ce:	c4 1f       	adc	r28, r20
 1d0:	93 1d       	adc	r25, r3
 1d2:	7c 1b       	sub	r23, r28
 1d4:	7e 19       	sub	r23, r14
 1d6:	9a 17       	cp	r25, r26
 1d8:	d3 15       	cp	r29, r3
 1da:	29 14       	cp	r2, r9
 1dc:	9d 12       	cpse	r9, r29
 1de:	31 11       	cpse	r19, r1
 1e0:	e4 0f       	add	r30, r20
 1e2:	b8 0e       	add	r11, r24
 1e4:	ae 0d       	add	r26, r14
 1e6:	c6 0c       	add	r12, r6
 1e8:	01 0c       	add	r0, r1
 1ea:	5e 0b       	sbc	r21, r30
 1ec:	e0 0a       	sbc	r14, r16
 1ee:	85 0a       	sbc	r8, r21
 1f0:	4f 0a       	sbc	r4, r31

000001f2 <tbl_cos_sin>:
 1f2:	ff 7f       	andi	r31, 0xFF	; 255
 1f4:	00 00       	nop
 1f6:	d7 7f       	andi	r29, 0xF7	; 247
 1f8:	47 06       	cpc	r4, r23
 1fa:	61 7f       	andi	r22, 0xF1	; 241
 1fc:	8b 0c       	add	r8, r11
 1fe:	9c 7e       	andi	r25, 0xEC	; 236
 200:	c7 12       	cpse	r12, r23
 202:	89 7d       	andi	r24, 0xD9	; 217
 204:	f8 18       	sub	r15, r8
 206:	29 7c       	andi	r18, 0xC9	; 201
 208:	19 1f       	adc	r17, r25
 20a:	7c 7a       	andi	r23, 0xAC	; 172
 20c:	27 25       	eor	r18, r7
 20e:	83 78       	andi	r24, 0x83	; 131
 210:	1e 2b       	or	r17, r30
 212:	40 76       	andi	r20, 0x60	; 96
 214:	fb 30       	cpi	r31, 0x0B	; 11
 216:	b5 73       	andi	r27, 0x35	; 53
 218:	b9 36       	cpi	r27, 0x69	; 105
 21a:	e1 70       	andi	r30, 0x01	; 1
 21c:	56 3c       	cpi	r21, 0xC6	; 198
 21e:	c9 6d       	ori	r28, 0xD9	; 217
 220:	cd 41       	sbci	r28, 0x1D	; 29
 222:	6c 6a       	ori	r22, 0xAC	; 172
 224:	1c 47       	sbci	r17, 0x7C	; 124
 226:	ce 66       	ori	r28, 0x6E	; 110
 228:	3f 4c       	sbci	r19, 0xCF	; 207
 22a:	f1 62       	ori	r31, 0x21	; 33
 22c:	33 51       	subi	r19, 0x13	; 19
 22e:	d6 5e       	subi	r29, 0xE6	; 230
 230:	f4 55       	subi	r31, 0x54	; 84
 232:	81 5a       	subi	r24, 0xA1	; 161
 234:	81 5a       	subi	r24, 0xA1	; 161
 236:	f4 55       	subi	r31, 0x54	; 84
 238:	d6 5e       	subi	r29, 0xE6	; 230
 23a:	33 51       	subi	r19, 0x13	; 19
 23c:	f1 62       	ori	r31, 0x21	; 33
 23e:	3f 4c       	sbci	r19, 0xCF	; 207
 240:	ce 66       	ori	r28, 0x6E	; 110
 242:	1c 47       	sbci	r17, 0x7C	; 124
 244:	6c 6a       	ori	r22, 0xAC	; 172
 246:	cd 41       	sbci	r28, 0x1D	; 29
 248:	c9 6d       	ori	r28, 0xD9	; 217
 24a:	56 3c       	cpi	r21, 0xC6	; 198
 24c:	e1 70       	andi	r30, 0x01	; 1
 24e:	b9 36       	cpi	r27, 0x69	; 105
 250:	b5 73       	andi	r27, 0x35	; 53
 252:	fb 30       	cpi	r31, 0x0B	; 11
 254:	40 76       	andi	r20, 0x60	; 96
 256:	1e 2b       	or	r17, r30
 258:	83 78       	andi	r24, 0x83	; 131
 25a:	27 25       	eor	r18, r7
 25c:	7c 7a       	andi	r23, 0xAC	; 172
 25e:	19 1f       	adc	r17, r25
 260:	29 7c       	andi	r18, 0xC9	; 201
 262:	f8 18       	sub	r15, r8
 264:	89 7d       	andi	r24, 0xD9	; 217
 266:	c7 12       	cpse	r12, r23
 268:	9c 7e       	andi	r25, 0xEC	; 236
 26a:	8b 0c       	add	r8, r11
 26c:	61 7f       	andi	r22, 0xF1	; 241
 26e:	47 06       	cpc	r4, r23
 270:	d7 7f       	andi	r29, 0xF7	; 247
 272:	00 00       	nop
 274:	fe 7f       	andi	r31, 0xFE	; 254
 276:	b9 f9       	.word	0xf9b9	; ????
 278:	d7 7f       	andi	r29, 0xF7	; 247
 27a:	75 f3       	brhs	.-36     	; 0x258 <tbl_cos_sin+0x66>
 27c:	61 7f       	andi	r22, 0xF1	; 241
 27e:	39 ed       	ldi	r19, 0xD9	; 217
 280:	9c 7e       	andi	r25, 0xEC	; 236
 282:	08 e7       	ldi	r16, 0x78	; 120
 284:	89 7d       	andi	r24, 0xD9	; 217
 286:	e7 e0       	ldi	r30, 0x07	; 7
 288:	29 7c       	andi	r18, 0xC9	; 201
 28a:	d9 da       	rcall	.-2638   	; 0xfffff83e <__eeprom_end+0xff7ef83e>
 28c:	7c 7a       	andi	r23, 0xAC	; 172
 28e:	e2 d4       	rcall	.+2500   	; 0xc54 <__data_load_end+0x278>
 290:	83 78       	andi	r24, 0x83	; 131
 292:	05 cf       	rjmp	.-502    	; 0x9e <__SREG__+0x5f>
 294:	40 76       	andi	r20, 0x60	; 96
 296:	47 c9       	rjmp	.-3442   	; 0xfffff526 <__eeprom_end+0xff7ef526>
 298:	b5 73       	andi	r27, 0x35	; 53
 29a:	aa c3       	rjmp	.+1876   	; 0x9f0 <__data_load_end+0x14>
 29c:	e1 70       	andi	r30, 0x01	; 1
 29e:	33 be       	out	0x33, r3	; 51
 2a0:	c9 6d       	ori	r28, 0xD9	; 217
 2a2:	e4 b8       	out	0x04, r14	; 4
 2a4:	6c 6a       	ori	r22, 0xAC	; 172
 2a6:	c1 b3       	in	r28, 0x11	; 17
 2a8:	ce 66       	ori	r28, 0x6E	; 110
 2aa:	cd ae       	std	Y+61, r12	; 0x3d
 2ac:	f1 62       	ori	r31, 0x21	; 33
 2ae:	0c aa       	std	Y+52, r0	; 0x34
 2b0:	d6 5e       	subi	r29, 0xE6	; 230
 2b2:	7f a5       	ldd	r23, Y+47	; 0x2f
 2b4:	81 5a       	subi	r24, 0xA1	; 161
 2b6:	2a a1       	ldd	r18, Y+34	; 0x22
 2b8:	f5 55       	subi	r31, 0x55	; 85
 2ba:	0f 9d       	mul	r16, r15
 2bc:	33 51       	subi	r19, 0x13	; 19
 2be:	32 99       	sbic	0x06, 2	; 6
 2c0:	3f 4c       	sbci	r19, 0xCF	; 207
 2c2:	94 95       	.word	0x9594	; ????
 2c4:	1c 47       	sbci	r17, 0x7C	; 124
 2c6:	37 92       	lat	Z, r3
 2c8:	cd 41       	sbci	r28, 0x1D	; 29
 2ca:	1f 8f       	std	Y+31, r17	; 0x1f
 2cc:	56 3c       	cpi	r21, 0xC6	; 198
 2ce:	4c 8c       	ldd	r4, Y+28	; 0x1c
 2d0:	b9 36       	cpi	r27, 0x69	; 105
 2d2:	c0 89       	ldd	r28, Z+16	; 0x10
 2d4:	fb 30       	cpi	r31, 0x0B	; 11
 2d6:	7d 87       	std	Y+13, r23	; 0x0d
 2d8:	1e 2b       	or	r17, r30
 2da:	84 85       	ldd	r24, Z+12	; 0x0c
 2dc:	27 25       	eor	r18, r7
 2de:	d8 83       	st	Y, r29
 2e0:	19 1f       	adc	r17, r25
 2e2:	77 82       	std	Z+7, r7	; 0x07
 2e4:	f8 18       	sub	r15, r8
 2e6:	64 81       	ldd	r22, Z+4	; 0x04
 2e8:	c7 12       	cpse	r12, r23
 2ea:	9f 80       	ldd	r9, Y+7	; 0x07
 2ec:	8b 0c       	add	r8, r11
 2ee:	29 80       	ldd	r2, Y+1	; 0x01
 2f0:	47 06       	cpc	r4, r23

000002f2 <tbl_bitrev>:
 2f2:	00 00       	nop
 2f4:	00 01       	movw	r0, r0
 2f6:	80 00       	.word	0x0080	; ????
 2f8:	80 01       	movw	r16, r0
 2fa:	40 00       	.word	0x0040	; ????
 2fc:	40 01       	movw	r8, r0
 2fe:	c0 00       	.word	0x00c0	; ????
 300:	c0 01       	movw	r24, r0
 302:	20 00       	.word	0x0020	; ????
 304:	20 01       	movw	r4, r0
 306:	a0 00       	.word	0x00a0	; ????
 308:	a0 01       	movw	r20, r0
 30a:	60 00       	.word	0x0060	; ????
 30c:	60 01       	movw	r12, r0
 30e:	e0 00       	.word	0x00e0	; ????
 310:	e0 01       	movw	r28, r0
 312:	10 00       	.word	0x0010	; ????
 314:	10 01       	movw	r2, r0
 316:	90 00       	.word	0x0090	; ????
 318:	90 01       	movw	r18, r0
 31a:	50 00       	.word	0x0050	; ????
 31c:	50 01       	movw	r10, r0
 31e:	d0 00       	.word	0x00d0	; ????
 320:	d0 01       	movw	r26, r0
 322:	30 00       	.word	0x0030	; ????
 324:	30 01       	movw	r6, r0
 326:	b0 00       	.word	0x00b0	; ????
 328:	b0 01       	movw	r22, r0
 32a:	70 00       	.word	0x0070	; ????
 32c:	70 01       	movw	r14, r0
 32e:	f0 00       	.word	0x00f0	; ????
 330:	f0 01       	movw	r30, r0
 332:	08 00       	.word	0x0008	; ????
 334:	08 01       	movw	r0, r16
 336:	88 00       	.word	0x0088	; ????
 338:	88 01       	movw	r16, r16
 33a:	48 00       	.word	0x0048	; ????
 33c:	48 01       	movw	r8, r16
 33e:	c8 00       	.word	0x00c8	; ????
 340:	c8 01       	movw	r24, r16
 342:	28 00       	.word	0x0028	; ????
 344:	28 01       	movw	r4, r16
 346:	a8 00       	.word	0x00a8	; ????
 348:	a8 01       	movw	r20, r16
 34a:	68 00       	.word	0x0068	; ????
 34c:	68 01       	movw	r12, r16
 34e:	e8 00       	.word	0x00e8	; ????
 350:	e8 01       	movw	r28, r16
 352:	18 00       	.word	0x0018	; ????
 354:	18 01       	movw	r2, r16
 356:	98 00       	.word	0x0098	; ????
 358:	98 01       	movw	r18, r16
 35a:	58 00       	.word	0x0058	; ????
 35c:	58 01       	movw	r10, r16
 35e:	d8 00       	.word	0x00d8	; ????
 360:	d8 01       	movw	r26, r16
 362:	38 00       	.word	0x0038	; ????
 364:	38 01       	movw	r6, r16
 366:	b8 00       	.word	0x00b8	; ????
 368:	b8 01       	movw	r22, r16
 36a:	78 00       	.word	0x0078	; ????
 36c:	78 01       	movw	r14, r16
 36e:	f8 00       	.word	0x00f8	; ????
 370:	f8 01       	movw	r30, r16

00000372 <fft_input>:
;----------------------------------------------------------------------------;
#ifndef INPUT_NOUSE
.global fft_input
.func fft_input
fft_input:
	pushw	T2H,T2L
 372:	3f 92       	push	r3
 374:	2f 92       	push	r2
	pushw	AH,AL
 376:	1f 93       	push	r17
 378:	0f 93       	push	r16
	pushw	YH,YL
 37a:	df 93       	push	r29
 37c:	cf 93       	push	r28

	movw	XL, EL				;X = array_src;
 37e:	dc 01       	movw	r26, r24
	movw	YL, DL				;Y = array_bfly;
 380:	eb 01       	movw	r28, r22
	clr	EH				;Zero
 382:	99 27       	eor	r25, r25
	ldiw	ZH,ZL, tbl_window		;Z = &tbl_window[0];
 384:	e2 ef       	ldi	r30, 0xF2	; 242
 386:	f0 e0       	ldi	r31, 0x00	; 0
	ldiw	AH,AL, FFT_N			;A = FFT_N;
 388:	00 e8       	ldi	r16, 0x80	; 128
 38a:	10 e0       	ldi	r17, 0x00	; 0
1:	lpmw	BH,BL, Z+			;B = *Z++; (window)
 38c:	25 91       	lpm	r18, Z+
 38e:	35 91       	lpm	r19, Z+
	ldw	CH,CL, X+			;C = *X++; (I-axis)
 390:	4d 91       	ld	r20, X+
 392:	5d 91       	ld	r21, X+
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
 394:	b5 03       	fmuls	r19, r21
 396:	b0 01       	movw	r22, r0
 398:	2c 03       	fmul	r18, r20
 39a:	10 01       	movw	r2, r0
 39c:	69 1f       	adc	r22, r25
 39e:	bc 03       	fmulsu	r19, r20
 3a0:	79 0b       	sbc	r23, r25
 3a2:	30 0c       	add	r3, r0
 3a4:	61 1d       	adc	r22, r1
 3a6:	79 1f       	adc	r23, r25
 3a8:	da 03       	fmulsu	r21, r18
 3aa:	79 0b       	sbc	r23, r25
 3ac:	30 0c       	add	r3, r0
 3ae:	61 1d       	adc	r22, r1
 3b0:	79 1f       	adc	r23, r25
	stw	Y+, DH,DL			;*Y++ = D;
 3b2:	69 93       	st	Y+, r22
 3b4:	79 93       	st	Y+, r23
#ifdef INPUT_IQ
	ldw	CH,CL, X+			;C = *X++; (Q-axis)
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
#endif
	stw	Y+, DH,DL			;*Y++ = D;
 3b6:	69 93       	st	Y+, r22
 3b8:	79 93       	st	Y+, r23
	subiw	AH,AL, 1			;while(--A)
 3ba:	01 50       	subi	r16, 0x01	; 1
 3bc:	10 40       	sbci	r17, 0x00	; 0
	brne	1b				;/
 3be:	31 f7       	brne	.-52     	; 0x38c <fft_input+0x1a>

	popw	YH,YL
 3c0:	cf 91       	pop	r28
 3c2:	df 91       	pop	r29
	popw	AH,AL
 3c4:	0f 91       	pop	r16
 3c6:	1f 91       	pop	r17
	popw	T2H,T2L
 3c8:	2f 90       	pop	r2
 3ca:	3f 90       	pop	r3
	clr	r1
 3cc:	11 24       	eor	r1, r1
	ret
 3ce:	08 95       	ret

000003d0 <fft_execute>:

;----------------------------------------------------------------------------;
.global fft_execute
.func fft_execute
fft_execute:
	pushw	T2H,T2L
 3d0:	3f 92       	push	r3
 3d2:	2f 92       	push	r2
	pushw	T4H,T4L
 3d4:	5f 92       	push	r5
 3d6:	4f 92       	push	r4
	pushw	T6H,T6L
 3d8:	7f 92       	push	r7
 3da:	6f 92       	push	r6
	pushw	T8H,T8L
 3dc:	9f 92       	push	r9
 3de:	8f 92       	push	r8
	pushw	T10H,T10L
 3e0:	bf 92       	push	r11
 3e2:	af 92       	push	r10
	pushw	T12H,T12L
 3e4:	df 92       	push	r13
 3e6:	cf 92       	push	r12
	pushw	T14H,T14L
 3e8:	ff 92       	push	r15
 3ea:	ef 92       	push	r14
	pushw	AH,AL
 3ec:	1f 93       	push	r17
 3ee:	0f 93       	push	r16
	pushw	YH,YL
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28

	movw	ZL, EL				;Z = array_bfly;
 3f4:	fc 01       	movw	r30, r24
	ldiw	EH,EL, 1			;E = 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
	ldiw	XH,XL, FFT_N/2			;X = FFT_N/2;
 3fa:	a0 e4       	ldi	r26, 0x40	; 64
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
1:	ldi	AL, 4				;T12 = E; (angular speed)
 3fe:	04 e0       	ldi	r16, 0x04	; 4
	mul	EL, AL				;
 400:	80 9f       	mul	r24, r16
	movw	T12L, T0L			;
 402:	60 01       	movw	r12, r0
	mul	EH, AL				;
 404:	90 9f       	mul	r25, r16
	add	T12H, T0L			;/
 406:	d0 0c       	add	r13, r0
	movw	T14L, EL			;T14 = E;
 408:	7c 01       	movw	r14, r24
	pushw	EH,EL
 40a:	9f 93       	push	r25
 40c:	8f 93       	push	r24
	movw	YL, ZL				;Z = &array_bfly[0];
 40e:	ef 01       	movw	r28, r30
	mul	XL, AL				;Y = &array_bfly[X];
 410:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
 412:	c0 0d       	add	r28, r0
 414:	d1 1d       	adc	r29, r1
	mul	XH, AL				;
 416:	b0 9f       	mul	r27, r16
	add	YH, T0L				;/
 418:	d0 0d       	add	r29, r0
	pushw	ZH,ZL
 41a:	ff 93       	push	r31
 41c:	ef 93       	push	r30
2:	clrw	T10H,T10L			;T10 = 0 (angle)
 41e:	bb 24       	eor	r11, r11
 420:	aa 24       	eor	r10, r10
	clr	EH				;Zero reg.
 422:	99 27       	eor	r25, r25
3:	lddw	AH,AL, Z+0			;A = *Z - *Y; *Z++ += *Y;
 424:	00 81       	ld	r16, Z
 426:	11 81       	ldd	r17, Z+1	; 0x01
	asrw	AH,AL				;
 428:	15 95       	asr	r17
 42a:	07 95       	ror	r16
	lddw	DH,DL, Y+0			;
 42c:	68 81       	ld	r22, Y
 42e:	79 81       	ldd	r23, Y+1	; 0x01
	asrw	DH,DL				;
 430:	75 95       	asr	r23
 432:	67 95       	ror	r22
	movw	CL, AL				;
 434:	a8 01       	movw	r20, r16
	subw	AH,AL, DH,DL			;
 436:	06 1b       	sub	r16, r22
 438:	17 0b       	sbc	r17, r23
	addw	CH,CL, DH,DL			;
 43a:	46 0f       	add	r20, r22
 43c:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
 43e:	41 93       	st	Z+, r20
 440:	51 93       	st	Z+, r21
	lddw	BH,BL, Z+0			;B = *Z - *Y; *Z++ += *Y;
 442:	20 81       	ld	r18, Z
 444:	31 81       	ldd	r19, Z+1	; 0x01
	asrw	BH,BL				;
 446:	35 95       	asr	r19
 448:	27 95       	ror	r18
	lddw	DH,DL, Y+2			;
 44a:	6a 81       	ldd	r22, Y+2	; 0x02
 44c:	7b 81       	ldd	r23, Y+3	; 0x03
	asrw	DH,DL				;
 44e:	75 95       	asr	r23
 450:	67 95       	ror	r22
	movw	CL, BL				;
 452:	a9 01       	movw	r20, r18
	subw	BH,BL, DH,DL			;
 454:	26 1b       	sub	r18, r22
 456:	37 0b       	sbc	r19, r23
	addw	CH,CL, DH,DL			;
 458:	46 0f       	add	r20, r22
 45a:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
 45c:	41 93       	st	Z+, r20
 45e:	51 93       	st	Z+, r21
	movw	T0L, ZL
 460:	0f 01       	movw	r0, r30
	ldiw	ZH,ZL, tbl_cos_sin		;C = cos(T10); D = sin(T10);
 462:	e2 ef       	ldi	r30, 0xF2	; 242
 464:	f1 e0       	ldi	r31, 0x01	; 1
	addw	ZH,ZL, T10H,T10L		;
 466:	ea 0d       	add	r30, r10
 468:	fb 1d       	adc	r31, r11
	lpmw	CH,CL, Z+			;
 46a:	45 91       	lpm	r20, Z+
 46c:	55 91       	lpm	r21, Z+
	lpmw	DH,DL, Z+			;/
 46e:	65 91       	lpm	r22, Z+
 470:	75 91       	lpm	r23, Z+
	movw	ZL, T0L
 472:	f0 01       	movw	r30, r0
	FMULS16	T4H,T4L,T2H,T2L, AH,AL, CH,CL	;*Y++ = A * C + B * D;
 474:	95 03       	fmuls	r17, r21
 476:	20 01       	movw	r4, r0
 478:	0c 03       	fmul	r16, r20
 47a:	10 01       	movw	r2, r0
 47c:	49 1e       	adc	r4, r25
 47e:	9c 03       	fmulsu	r17, r20
 480:	59 0a       	sbc	r5, r25
 482:	30 0c       	add	r3, r0
 484:	41 1c       	adc	r4, r1
 486:	59 1e       	adc	r5, r25
 488:	d8 03       	fmulsu	r21, r16
 48a:	59 0a       	sbc	r5, r25
 48c:	30 0c       	add	r3, r0
 48e:	41 1c       	adc	r4, r1
 490:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, BH,BL, DH,DL	;
 492:	b7 03       	fmuls	r19, r23
 494:	40 01       	movw	r8, r0
 496:	2e 03       	fmul	r18, r22
 498:	30 01       	movw	r6, r0
 49a:	89 1e       	adc	r8, r25
 49c:	be 03       	fmulsu	r19, r22
 49e:	99 0a       	sbc	r9, r25
 4a0:	70 0c       	add	r7, r0
 4a2:	81 1c       	adc	r8, r1
 4a4:	99 1e       	adc	r9, r25
 4a6:	fa 03       	fmulsu	r23, r18
 4a8:	99 0a       	sbc	r9, r25
 4aa:	70 0c       	add	r7, r0
 4ac:	81 1c       	adc	r8, r1
 4ae:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
 4b0:	26 0c       	add	r2, r6
 4b2:	37 1c       	adc	r3, r7
 4b4:	48 1c       	adc	r4, r8
 4b6:	59 1c       	adc	r5, r9
	stw	Y+, T4H,T4L			;/
 4b8:	49 92       	st	Y+, r4
 4ba:	59 92       	st	Y+, r5
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, CH,CL 	;*Y++ = B * C - A * D;
 4bc:	b5 03       	fmuls	r19, r21
 4be:	20 01       	movw	r4, r0
 4c0:	2c 03       	fmul	r18, r20
 4c2:	10 01       	movw	r2, r0
 4c4:	49 1e       	adc	r4, r25
 4c6:	bc 03       	fmulsu	r19, r20
 4c8:	59 0a       	sbc	r5, r25
 4ca:	30 0c       	add	r3, r0
 4cc:	41 1c       	adc	r4, r1
 4ce:	59 1e       	adc	r5, r25
 4d0:	da 03       	fmulsu	r21, r18
 4d2:	59 0a       	sbc	r5, r25
 4d4:	30 0c       	add	r3, r0
 4d6:	41 1c       	adc	r4, r1
 4d8:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, AH,AL, DH,DL 	;
 4da:	97 03       	fmuls	r17, r23
 4dc:	40 01       	movw	r8, r0
 4de:	0e 03       	fmul	r16, r22
 4e0:	30 01       	movw	r6, r0
 4e2:	89 1e       	adc	r8, r25
 4e4:	9e 03       	fmulsu	r17, r22
 4e6:	99 0a       	sbc	r9, r25
 4e8:	70 0c       	add	r7, r0
 4ea:	81 1c       	adc	r8, r1
 4ec:	99 1e       	adc	r9, r25
 4ee:	f8 03       	fmulsu	r23, r16
 4f0:	99 0a       	sbc	r9, r25
 4f2:	70 0c       	add	r7, r0
 4f4:	81 1c       	adc	r8, r1
 4f6:	99 1e       	adc	r9, r25
	subd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
 4f8:	26 18       	sub	r2, r6
 4fa:	37 08       	sbc	r3, r7
 4fc:	48 08       	sbc	r4, r8
 4fe:	59 08       	sbc	r5, r9
	stw	Y+, T4H,T4L			;/
 500:	49 92       	st	Y+, r4
 502:	59 92       	st	Y+, r5
	addw	T10H,T10L, T12H,T12L		;T10 += T12; (next angle)
 504:	ac 0c       	add	r10, r12
 506:	bd 1c       	adc	r11, r13
#if FFT_N >= 128
	sbrs	T10H, FFT_B - 7			;while(T10 < pi)
 508:	b0 fe       	sbrs	r11, 0
#else
	sbrs	T10L, FFT_B + 1
#endif
	rjmp	3b				;/
 50a:	8c cf       	rjmp	.-232    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	ldi	AL, 4				;Y += X; Z += X; (skip split segment)
 50c:	04 e0       	ldi	r16, 0x04	; 4
	mul	XL, AL
 50e:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
 510:	c0 0d       	add	r28, r0
 512:	d1 1d       	adc	r29, r1
	addw	ZH,ZL, T0H,T0L			;
 514:	e0 0d       	add	r30, r0
 516:	f1 1d       	adc	r31, r1
	mul	XH, AL				;
 518:	b0 9f       	mul	r27, r16
	add	YH, T0L				;
 51a:	d0 0d       	add	r29, r0
	add	ZH, T0L				;/
 51c:	f0 0d       	add	r31, r0
	ldi	EL, 1				;while(--T14)
 51e:	81 e0       	ldi	r24, 0x01	; 1
	subw	T14H,T14L, EH,EL		;
 520:	e8 1a       	sub	r14, r24
 522:	f9 0a       	sbc	r15, r25
	rjne	2b				;/
 524:	09 f0       	breq	.+2      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 526:	7b cf       	rjmp	.-266    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	popw	ZH,ZL
 528:	ef 91       	pop	r30
 52a:	ff 91       	pop	r31
	popw	EH,EL
 52c:	8f 91       	pop	r24
 52e:	9f 91       	pop	r25
	lslw	EH,EL				;E *= 2;
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
	lsrw	XH,XL				;while(X /= 2)
 534:	b6 95       	lsr	r27
 536:	a7 95       	ror	r26
	adiw	XL, 0				;
 538:	10 96       	adiw	r26, 0x00	; 0
	rjne	1b				;/
 53a:	09 f0       	breq	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53c:	60 cf       	rjmp	.-320    	; 0x3fe <fft_execute+0x2e>

	popw	YH,YL
 53e:	cf 91       	pop	r28
 540:	df 91       	pop	r29
	popw	AH,AL
 542:	0f 91       	pop	r16
 544:	1f 91       	pop	r17
	popw	T14H,T14L
 546:	ef 90       	pop	r14
 548:	ff 90       	pop	r15
	popw	T12H,T12L
 54a:	cf 90       	pop	r12
 54c:	df 90       	pop	r13
	popw	T10H,T10L
 54e:	af 90       	pop	r10
 550:	bf 90       	pop	r11
	popw	T8H,T8L
 552:	8f 90       	pop	r8
 554:	9f 90       	pop	r9
	popw	T6H,T6L
 556:	6f 90       	pop	r6
 558:	7f 90       	pop	r7
	popw	T4H,T4L
 55a:	4f 90       	pop	r4
 55c:	5f 90       	pop	r5
	popw	T2H,T2L
 55e:	2f 90       	pop	r2
 560:	3f 90       	pop	r3
;	clr	r1
	ret
 562:	08 95       	ret

00000564 <fft_output>:

;----------------------------------------------------------------------------;
.global fft_output
.func fft_output
fft_output:
	pushw	T2H,T2L
 564:	3f 92       	push	r3
 566:	2f 92       	push	r2
	pushw	T4H,T4L
 568:	5f 92       	push	r5
 56a:	4f 92       	push	r4
	pushw	T6H,T6L
 56c:	7f 92       	push	r7
 56e:	6f 92       	push	r6
	pushw	T8H,T8L
 570:	9f 92       	push	r9
 572:	8f 92       	push	r8
	pushw	T10H,T10L
 574:	bf 92       	push	r11
 576:	af 92       	push	r10
	pushw	AH,AL
 578:	1f 93       	push	r17
 57a:	0f 93       	push	r16
	pushw	YH,YL
 57c:	df 93       	push	r29
 57e:	cf 93       	push	r28

	movw	T10L, EL			;T10 = array_bfly;
 580:	5c 01       	movw	r10, r24
	movw	YL, DL				;Y = array_output;
 582:	eb 01       	movw	r28, r22
	ldiw	ZH,ZL, tbl_bitrev		;Z = tbl_bitrev;
 584:	e2 ef       	ldi	r30, 0xF2	; 242
 586:	f2 e0       	ldi	r31, 0x02	; 2
	clr	EH				;Zero
 588:	99 27       	eor	r25, r25
#ifdef INPUT_IQ
	ldiw	AH,AL, FFT_N			;A = FFT_N; (plus/minus)
#else
	ldiw	AH,AL, FFT_N / 2		;A = FFT_N / 2; (plus only)
 58a:	00 e4       	ldi	r16, 0x40	; 64
 58c:	10 e0       	ldi	r17, 0x00	; 0
#endif
1:	lpmw	XH,XL, Z+			;X = *Z++;
 58e:	a5 91       	lpm	r26, Z+
 590:	b5 91       	lpm	r27, Z+
	addw	XH,XL, T10H,T10L		;X += array_bfly;
 592:	aa 0d       	add	r26, r10
 594:	bb 1d       	adc	r27, r11
	ldw	BH,BL, X+			;B = *X++;
 596:	2d 91       	ld	r18, X+
 598:	3d 91       	ld	r19, X+
	ldw	CH,CL, X+			;C = *X++;
 59a:	4d 91       	ld	r20, X+
 59c:	5d 91       	ld	r21, X+
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, BH,BL	;T4:T2 = B * B;
 59e:	b3 03       	fmuls	r19, r19
 5a0:	20 01       	movw	r4, r0
 5a2:	2a 03       	fmul	r18, r18
 5a4:	10 01       	movw	r2, r0
 5a6:	49 1e       	adc	r4, r25
 5a8:	ba 03       	fmulsu	r19, r18
 5aa:	59 0a       	sbc	r5, r25
 5ac:	30 0c       	add	r3, r0
 5ae:	41 1c       	adc	r4, r1
 5b0:	59 1e       	adc	r5, r25
 5b2:	ba 03       	fmulsu	r19, r18
 5b4:	59 0a       	sbc	r5, r25
 5b6:	30 0c       	add	r3, r0
 5b8:	41 1c       	adc	r4, r1
 5ba:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, CH,CL, CH,CL	;T8:T6 = C * C;
 5bc:	d5 03       	fmuls	r21, r21
 5be:	40 01       	movw	r8, r0
 5c0:	4c 03       	fmul	r20, r20
 5c2:	30 01       	movw	r6, r0
 5c4:	89 1e       	adc	r8, r25
 5c6:	dc 03       	fmulsu	r21, r20
 5c8:	99 0a       	sbc	r9, r25
 5ca:	70 0c       	add	r7, r0
 5cc:	81 1c       	adc	r8, r1
 5ce:	99 1e       	adc	r9, r25
 5d0:	dc 03       	fmulsu	r21, r20
 5d2:	99 0a       	sbc	r9, r25
 5d4:	70 0c       	add	r7, r0
 5d6:	81 1c       	adc	r8, r1
 5d8:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;T4:T2 += T8:T6;
 5da:	26 0c       	add	r2, r6
 5dc:	37 1c       	adc	r3, r7
 5de:	48 1c       	adc	r4, r8
 5e0:	59 1c       	adc	r5, r9
	SQRT32					;B = sqrt(T4:T2);
 5e2:	66 24       	eor	r6, r6
 5e4:	77 24       	eor	r7, r7
 5e6:	88 24       	eor	r8, r8
 5e8:	99 24       	eor	r9, r9
 5ea:	21 e0       	ldi	r18, 0x01	; 1
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	44 27       	eor	r20, r20
 5f0:	55 27       	eor	r21, r21
 5f2:	70 e1       	ldi	r23, 0x10	; 16
 5f4:	22 0c       	add	r2, r2
 5f6:	33 1c       	adc	r3, r3
 5f8:	44 1c       	adc	r4, r4
 5fa:	55 1c       	adc	r5, r5
 5fc:	66 1c       	adc	r6, r6
 5fe:	77 1c       	adc	r7, r7
 600:	88 1c       	adc	r8, r8
 602:	99 1c       	adc	r9, r9
 604:	22 0c       	add	r2, r2
 606:	33 1c       	adc	r3, r3
 608:	44 1c       	adc	r4, r4
 60a:	55 1c       	adc	r5, r5
 60c:	66 1c       	adc	r6, r6
 60e:	77 1c       	adc	r7, r7
 610:	88 1c       	adc	r8, r8
 612:	99 1c       	adc	r9, r9
 614:	2a f4       	brpl	.+10     	; 0x620 <fft_output+0xbc>
 616:	62 0e       	add	r6, r18
 618:	73 1e       	adc	r7, r19
 61a:	84 1e       	adc	r8, r20
 61c:	95 1e       	adc	r9, r21
 61e:	04 c0       	rjmp	.+8      	; 0x628 <fft_output+0xc4>
 620:	62 1a       	sub	r6, r18
 622:	73 0a       	sbc	r7, r19
 624:	84 0a       	sbc	r8, r20
 626:	95 0a       	sbc	r9, r21
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	44 1f       	adc	r20, r20
 62e:	28 7f       	andi	r18, 0xF8	; 248
 630:	25 60       	ori	r18, 0x05	; 5
 632:	97 fc       	sbrc	r9, 7
 634:	22 50       	subi	r18, 0x02	; 2
 636:	7a 95       	dec	r23
 638:	e9 f6       	brne	.-70     	; 0x5f4 <fft_output+0x90>
 63a:	46 95       	lsr	r20
 63c:	37 95       	ror	r19
 63e:	27 95       	ror	r18
 640:	46 95       	lsr	r20
 642:	37 95       	ror	r19
 644:	27 95       	ror	r18
	stw	Y+, BH,BL			;*Y++ = B;
 646:	29 93       	st	Y+, r18
 648:	39 93       	st	Y+, r19
	subiw	AH,AL, 1			;while(--A)
 64a:	01 50       	subi	r16, 0x01	; 1
 64c:	10 40       	sbci	r17, 0x00	; 0
	rjne	1b				;/
 64e:	09 f0       	breq	.+2      	; 0x652 <fft_output+0xee>
 650:	9e cf       	rjmp	.-196    	; 0x58e <fft_output+0x2a>

	popw	YH,YL
 652:	cf 91       	pop	r28
 654:	df 91       	pop	r29
	popw	AH,AL
 656:	0f 91       	pop	r16
 658:	1f 91       	pop	r17
	popw	T10H,T10L
 65a:	af 90       	pop	r10
 65c:	bf 90       	pop	r11
	popw	T8H,T8L
 65e:	8f 90       	pop	r8
 660:	9f 90       	pop	r9
	popw	T6H,T6L
 662:	6f 90       	pop	r6
 664:	7f 90       	pop	r7
	popw	T4H,T4L
 666:	4f 90       	pop	r4
 668:	5f 90       	pop	r5
	popw	T2H,T2L
 66a:	2f 90       	pop	r2
 66c:	3f 90       	pop	r3
	clr	r1
 66e:	11 24       	eor	r1, r1
	ret
 670:	08 95       	ret

00000672 <fmuls_f>:

;----------------------------------------------------------------------------;
.global fmuls_f
.func fmuls_f
fmuls_f:
	movw	CL, EL				;C = E;
 672:	ac 01       	movw	r20, r24
	clr	EH	;Zero
 674:	99 27       	eor	r25, r25
	FMULS16	ZH,ZL,XH,XL, CH,CL, DH,DL	;Z:X = C * D;
 676:	d7 03       	fmuls	r21, r23
 678:	f0 01       	movw	r30, r0
 67a:	4e 03       	fmul	r20, r22
 67c:	d0 01       	movw	r26, r0
 67e:	e9 1f       	adc	r30, r25
 680:	de 03       	fmulsu	r21, r22
 682:	f9 0b       	sbc	r31, r25
 684:	b0 0d       	add	r27, r0
 686:	e1 1d       	adc	r30, r1
 688:	f9 1f       	adc	r31, r25
 68a:	fc 03       	fmulsu	r23, r20
 68c:	f9 0b       	sbc	r31, r25
 68e:	b0 0d       	add	r27, r0
 690:	e1 1d       	adc	r30, r1
 692:	f9 1f       	adc	r31, r25
	movw	EL, ZL
 694:	cf 01       	movw	r24, r30
	clr	r1
 696:	11 24       	eor	r1, r1
	ret
 698:	08 95       	ret

0000069a <fftlib_init_adc>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 6a0:	8f ee       	ldi	r24, 0xEF	; 239
 6a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 6a6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 6b0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 6b4:	78 94       	sei
 6b6:	80 e8       	ldi	r24, 0x80	; 128
 6b8:	e1 e3       	ldi	r30, 0x31	; 49
 6ba:	f3 e0       	ldi	r31, 0x03	; 3
 6bc:	df 01       	movw	r26, r30
 6be:	1d 92       	st	X+, r1
 6c0:	8a 95       	dec	r24
 6c2:	e9 f7       	brne	.-6      	; 0x6be <fftlib_init_adc+0x24>
 6c4:	08 95       	ret

000006c6 <__vector_21>:
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
 6d0:	2f 93       	push	r18
 6d2:	3f 93       	push	r19
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	ef 93       	push	r30
 6da:	ff 93       	push	r31
 6dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 6e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 6e4:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <samplePos>
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	9c 01       	movw	r18, r24
 6ec:	2d 5f       	subi	r18, 0xFD	; 253
 6ee:	31 40       	sbci	r19, 0x01	; 1
 6f0:	27 30       	cpi	r18, 0x07	; 7
 6f2:	31 05       	cpc	r19, r1
 6f4:	10 f0       	brcs	.+4      	; 0x6fa <__vector_21+0x34>
 6f6:	92 50       	subi	r25, 0x02	; 2
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__vector_21+0x38>
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	ee 0f       	add	r30, r30
 700:	ff 1f       	adc	r31, r31
 702:	ef 54       	subi	r30, 0x4F	; 79
 704:	fc 4f       	sbci	r31, 0xFC	; 252
 706:	91 83       	std	Z+1, r25	; 0x01
 708:	80 83       	st	Z, r24
 70a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <samplePos>
 70e:	8f 5f       	subi	r24, 0xFF	; 255
 710:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <samplePos>
 714:	88 23       	and	r24, r24
 716:	2c f4       	brge	.+10     	; 0x722 <__vector_21+0x5c>
 718:	ea e7       	ldi	r30, 0x7A	; 122
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	87 7f       	andi	r24, 0xF7	; 247
 720:	80 83       	st	Z, r24
 722:	ff 91       	pop	r31
 724:	ef 91       	pop	r30
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	0f 90       	pop	r0
 730:	0f be       	out	0x3f, r0	; 63
 732:	0f 90       	pop	r0
 734:	1f 90       	pop	r1
 736:	18 95       	reti

00000738 <closeLed>:
 738:	88 b1       	in	r24, 0x08	; 8
 73a:	82 7c       	andi	r24, 0xC2	; 194
 73c:	88 b9       	out	0x08, r24	; 8
 73e:	8b b1       	in	r24, 0x0b	; 11
 740:	83 70       	andi	r24, 0x03	; 3
 742:	8b b9       	out	0x0b, r24	; 11
 744:	8e b1       	in	r24, 0x0e	; 14
 746:	8a 7f       	andi	r24, 0xFA	; 250
 748:	8e b9       	out	0x0e, r24	; 14
 74a:	85 b1       	in	r24, 0x05	; 5
 74c:	88 7f       	andi	r24, 0xF8	; 248
 74e:	85 b9       	out	0x05, r24	; 5
 750:	08 95       	ret

00000752 <printColumn>:
 752:	18 16       	cp	r1, r24
 754:	19 06       	cpc	r1, r25
 756:	e4 f4       	brge	.+56     	; 0x790 <printColumn+0x3e>
 758:	2a 9a       	sbi	0x05, 2	; 5
 75a:	82 30       	cpi	r24, 0x02	; 2
 75c:	91 05       	cpc	r25, r1
 75e:	c4 f0       	brlt	.+48     	; 0x790 <printColumn+0x3e>
 760:	29 9a       	sbi	0x05, 1	; 5
 762:	83 30       	cpi	r24, 0x03	; 3
 764:	91 05       	cpc	r25, r1
 766:	a4 f0       	brlt	.+40     	; 0x790 <printColumn+0x3e>
 768:	28 9a       	sbi	0x05, 0	; 5
 76a:	84 30       	cpi	r24, 0x04	; 4
 76c:	91 05       	cpc	r25, r1
 76e:	84 f0       	brlt	.+32     	; 0x790 <printColumn+0x3e>
 770:	5f 9a       	sbi	0x0b, 7	; 11
 772:	85 30       	cpi	r24, 0x05	; 5
 774:	91 05       	cpc	r25, r1
 776:	64 f0       	brlt	.+24     	; 0x790 <printColumn+0x3e>
 778:	5e 9a       	sbi	0x0b, 6	; 11
 77a:	86 30       	cpi	r24, 0x06	; 6
 77c:	91 05       	cpc	r25, r1
 77e:	44 f0       	brlt	.+16     	; 0x790 <printColumn+0x3e>
 780:	5a 9a       	sbi	0x0b, 2	; 11
 782:	87 30       	cpi	r24, 0x07	; 7
 784:	91 05       	cpc	r25, r1
 786:	24 f0       	brlt	.+8      	; 0x790 <printColumn+0x3e>
 788:	5b 9a       	sbi	0x0b, 3	; 11
 78a:	08 97       	sbiw	r24, 0x08	; 8
 78c:	0c f0       	brlt	.+2      	; 0x790 <printColumn+0x3e>
 78e:	5c 9a       	sbi	0x0b, 4	; 11
 790:	08 95       	ret

00000792 <printLed>:
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	11 f4       	brne	.+4      	; 0x79a <printLed+0x8>
 796:	44 9a       	sbi	0x08, 4	; 8
 798:	21 c0       	rjmp	.+66     	; 0x7dc <printLed+0x4a>
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	91 05       	cpc	r25, r1
 79e:	11 f4       	brne	.+4      	; 0x7a4 <printLed+0x12>
 7a0:	43 9a       	sbi	0x08, 3	; 8
 7a2:	1c c0       	rjmp	.+56     	; 0x7dc <printLed+0x4a>
 7a4:	82 30       	cpi	r24, 0x02	; 2
 7a6:	91 05       	cpc	r25, r1
 7a8:	11 f4       	brne	.+4      	; 0x7ae <printLed+0x1c>
 7aa:	42 9a       	sbi	0x08, 2	; 8
 7ac:	17 c0       	rjmp	.+46     	; 0x7dc <printLed+0x4a>
 7ae:	83 30       	cpi	r24, 0x03	; 3
 7b0:	91 05       	cpc	r25, r1
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <printLed+0x26>
 7b4:	45 9a       	sbi	0x08, 5	; 8
 7b6:	12 c0       	rjmp	.+36     	; 0x7dc <printLed+0x4a>
 7b8:	84 30       	cpi	r24, 0x04	; 4
 7ba:	91 05       	cpc	r25, r1
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <printLed+0x30>
 7be:	5d 9a       	sbi	0x0b, 5	; 11
 7c0:	0d c0       	rjmp	.+26     	; 0x7dc <printLed+0x4a>
 7c2:	85 30       	cpi	r24, 0x05	; 5
 7c4:	91 05       	cpc	r25, r1
 7c6:	11 f4       	brne	.+4      	; 0x7cc <printLed+0x3a>
 7c8:	72 9a       	sbi	0x0e, 2	; 14
 7ca:	08 c0       	rjmp	.+16     	; 0x7dc <printLed+0x4a>
 7cc:	86 30       	cpi	r24, 0x06	; 6
 7ce:	91 05       	cpc	r25, r1
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <printLed+0x44>
 7d2:	70 9a       	sbi	0x0e, 0	; 14
 7d4:	03 c0       	rjmp	.+6      	; 0x7dc <printLed+0x4a>
 7d6:	07 97       	sbiw	r24, 0x07	; 7
 7d8:	09 f4       	brne	.+2      	; 0x7dc <printLed+0x4a>
 7da:	40 9a       	sbi	0x08, 0	; 8
 7dc:	cb 01       	movw	r24, r22
 7de:	0e 94 a9 03 	call	0x752	; 0x752 <printColumn>
 7e2:	8f e9       	ldi	r24, 0x9F	; 159
 7e4:	9f e0       	ldi	r25, 0x0F	; 15
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <printLed+0x54>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <printLed+0x5a>
 7ec:	00 00       	nop
 7ee:	0e 94 9c 03 	call	0x738	; 0x738 <closeLed>
 7f2:	08 95       	ret

000007f4 <handleNewData>:





void handleNewData(uint16_t spectrum[]){
 7f4:	ef 92       	push	r14
 7f6:	ff 92       	push	r15
 7f8:	0f 93       	push	r16
 7fa:	1f 93       	push	r17
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
 804:	60 97       	sbiw	r28, 0x10	; 16
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	f8 94       	cli
 80a:	de bf       	out	0x3e, r29	; 62
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	cd bf       	out	0x3d, r28	; 61
	uint16_t noise[8]={12,4,2,3,1,1,1,2};			//noise level, can be edited to fit better
 810:	20 e1       	ldi	r18, 0x10	; 16
 812:	e0 e0       	ldi	r30, 0x00	; 0
 814:	f1 e0       	ldi	r31, 0x01	; 1
 816:	de 01       	movw	r26, r28
 818:	11 96       	adiw	r26, 0x01	; 1
 81a:	01 90       	ld	r0, Z+
 81c:	0d 92       	st	X+, r0
 81e:	2a 95       	dec	r18
 820:	e1 f7       	brne	.-8      	; 0x81a <handleNewData+0x26>
	int result = 0;
	int helper = 0;
	for(int i = 0; i < 64; i++){
		result += spectrum[i];
 822:	dc 01       	movw	r26, r24
 824:	ed 91       	ld	r30, X+
 826:	fd 91       	ld	r31, X+
		if(((i+1) % 8 == 0) && ((i+1) != 0)){
 828:	21 e0       	ldi	r18, 0x01	; 1
 82a:	30 e0       	ldi	r19, 0x00	; 0
				}
				else{
					newData[helper] = newData[helper] - noise[helper];
				}
				if(newData[helper] > 8){
					newData[helper] = 8;
 82c:	88 e0       	ldi	r24, 0x08	; 8
 82e:	90 e0       	ldi	r25, 0x00	; 0
void handleNewData(uint16_t spectrum[]){
	uint16_t noise[8]={12,4,2,3,1,1,1,2};			//noise level, can be edited to fit better
	int result = 0;
	int helper = 0;
	for(int i = 0; i < 64; i++){
		result += spectrum[i];
 830:	4d 91       	ld	r20, X+
 832:	5d 91       	ld	r21, X+
 834:	e4 0f       	add	r30, r20
 836:	f5 1f       	adc	r31, r21
		if(((i+1) % 8 == 0) && ((i+1) != 0)){
 838:	2f 5f       	subi	r18, 0xFF	; 255
 83a:	3f 4f       	sbci	r19, 0xFF	; 255
 83c:	a9 01       	movw	r20, r18
 83e:	47 70       	andi	r20, 0x07	; 7
 840:	55 27       	eor	r21, r21
 842:	45 2b       	or	r20, r21
 844:	09 f0       	breq	.+2      	; 0x848 <handleNewData+0x54>
 846:	4f c0       	rjmp	.+158    	; 0x8e6 <handleNewData+0xf2>
 848:	21 15       	cp	r18, r1
 84a:	31 05       	cpc	r19, r1
 84c:	09 f4       	brne	.+2      	; 0x850 <handleNewData+0x5c>
 84e:	4b c0       	rjmp	.+150    	; 0x8e6 <handleNewData+0xf2>
				helper = (i+1)/8 - 1;
 850:	a9 01       	movw	r20, r18
 852:	33 23       	and	r19, r19
 854:	14 f4       	brge	.+4      	; 0x85a <handleNewData+0x66>
 856:	49 5f       	subi	r20, 0xF9	; 249
 858:	5f 4f       	sbci	r21, 0xFF	; 255
 85a:	55 95       	asr	r21
 85c:	47 95       	ror	r20
 85e:	55 95       	asr	r21
 860:	47 95       	ror	r20
 862:	55 95       	asr	r21
 864:	47 95       	ror	r20
 866:	41 50       	subi	r20, 0x01	; 1
 868:	51 09       	sbc	r21, r1
				result /= 8;
					
				newData[helper] = result;
 86a:	bf 01       	movw	r22, r30
 86c:	ff 23       	and	r31, r31
 86e:	14 f4       	brge	.+4      	; 0x874 <handleNewData+0x80>
 870:	69 5f       	subi	r22, 0xF9	; 249
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	75 95       	asr	r23
 876:	67 95       	ror	r22
 878:	75 95       	asr	r23
 87a:	67 95       	ror	r22
 87c:	75 95       	asr	r23
 87e:	67 95       	ror	r22
 880:	7a 01       	movw	r14, r20
 882:	ee 0c       	add	r14, r14
 884:	ff 1c       	adc	r15, r15
 886:	87 01       	movw	r16, r14
 888:	00 5f       	subi	r16, 0xF0	; 240
 88a:	1e 4f       	sbci	r17, 0xFE	; 254
 88c:	f8 01       	movw	r30, r16
 88e:	71 83       	std	Z+1, r23	; 0x01
 890:	60 83       	st	Z, r22
				result = 0;
					
				if(newData[helper] < noise[helper]){
 892:	e1 e0       	ldi	r30, 0x01	; 1
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	ec 0f       	add	r30, r28
 898:	fd 1f       	adc	r31, r29
 89a:	ee 0d       	add	r30, r14
 89c:	ff 1d       	adc	r31, r15
 89e:	01 90       	ld	r0, Z+
 8a0:	f0 81       	ld	r31, Z
 8a2:	e0 2d       	mov	r30, r0
 8a4:	6e 17       	cp	r22, r30
 8a6:	7f 07       	cpc	r23, r31
 8a8:	30 f4       	brcc	.+12     	; 0x8b6 <handleNewData+0xc2>
					newData[helper] = 0;
 8aa:	f8 01       	movw	r30, r16
 8ac:	11 82       	std	Z+1, r1	; 0x01
 8ae:	10 82       	st	Z, r1
		if(((i+1) % 8 == 0) && ((i+1) != 0)){
				helper = (i+1)/8 - 1;
				result /= 8;
					
				newData[helper] = result;
				result = 0;
 8b0:	e0 e0       	ldi	r30, 0x00	; 0
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	18 c0       	rjmp	.+48     	; 0x8e6 <handleNewData+0xf2>
					
				if(newData[helper] < noise[helper]){
					newData[helper] = 0;
				}
				else{
					newData[helper] = newData[helper] - noise[helper];
 8b6:	6e 1b       	sub	r22, r30
 8b8:	7f 0b       	sbc	r23, r31
 8ba:	fa 01       	movw	r30, r20
 8bc:	ee 0f       	add	r30, r30
 8be:	ff 1f       	adc	r31, r31
 8c0:	e0 5f       	subi	r30, 0xF0	; 240
 8c2:	fe 4f       	sbci	r31, 0xFE	; 254
 8c4:	71 83       	std	Z+1, r23	; 0x01
 8c6:	60 83       	st	Z, r22
				}
				if(newData[helper] > 8){
 8c8:	69 30       	cpi	r22, 0x09	; 9
 8ca:	71 05       	cpc	r23, r1
 8cc:	50 f0       	brcs	.+20     	; 0x8e2 <handleNewData+0xee>
					newData[helper] = 8;
 8ce:	44 0f       	add	r20, r20
 8d0:	55 1f       	adc	r21, r21
 8d2:	fa 01       	movw	r30, r20
 8d4:	e0 5f       	subi	r30, 0xF0	; 240
 8d6:	fe 4f       	sbci	r31, 0xFE	; 254
 8d8:	91 83       	std	Z+1, r25	; 0x01
 8da:	80 83       	st	Z, r24
		if(((i+1) % 8 == 0) && ((i+1) != 0)){
				helper = (i+1)/8 - 1;
				result /= 8;
					
				newData[helper] = result;
				result = 0;
 8dc:	e0 e0       	ldi	r30, 0x00	; 0
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <handleNewData+0xf2>
 8e2:	e0 e0       	ldi	r30, 0x00	; 0
 8e4:	f0 e0       	ldi	r31, 0x00	; 0

void handleNewData(uint16_t spectrum[]){
	uint16_t noise[8]={12,4,2,3,1,1,1,2};			//noise level, can be edited to fit better
	int result = 0;
	int helper = 0;
	for(int i = 0; i < 64; i++){
 8e6:	20 34       	cpi	r18, 0x40	; 64
 8e8:	31 05       	cpc	r19, r1
 8ea:	09 f0       	breq	.+2      	; 0x8ee <handleNewData+0xfa>
 8ec:	a1 cf       	rjmp	.-190    	; 0x830 <handleNewData+0x3c>
				if(newData[helper] > 8){
					newData[helper] = 8;
				}
		}
	}
 8ee:	60 96       	adiw	r28, 0x10	; 16
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	f8 94       	cli
 8f4:	de bf       	out	0x3e, r29	; 62
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	cd bf       	out	0x3d, r28	; 61
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	ff 90       	pop	r15
 904:	ef 90       	pop	r14
 906:	08 95       	ret

00000908 <main>:

int main(void)
{	
	
	// Start the ADC in free running mode
	fftlib_init_adc();
 908:	0e 94 4d 03 	call	0x69a	; 0x69a <fftlib_init_adc>
	while (1)
	{
		// Compute the FFT
		fft_input(capture, bfly_buff);   // Samples -> complex #s
		samplePos = 0;                   // Reset sample counter
		ADCSRA |= _BV(ADIE);             // Resume sampling interrupt
 90c:	0f 2e       	mov	r0, r31
 90e:	fa e7       	ldi	r31, 0x7A	; 122
 910:	cf 2e       	mov	r12, r31
 912:	d1 2c       	mov	r13, r1
 914:	f0 2d       	mov	r31, r0
 916:	0f 2e       	mov	r0, r31
 918:	f0 e3       	ldi	r31, 0x30	; 48
 91a:	ef 2e       	mov	r14, r31
 91c:	f1 e0       	ldi	r31, 0x01	; 1
 91e:	ff 2e       	mov	r15, r31
 920:	f0 2d       	mov	r31, r0
	fftlib_init_adc();
	
	while (1)
	{
		// Compute the FFT
		fft_input(capture, bfly_buff);   // Samples -> complex #s
 922:	61 e3       	ldi	r22, 0x31	; 49
 924:	71 e0       	ldi	r23, 0x01	; 1
 926:	81 eb       	ldi	r24, 0xB1	; 177
 928:	93 e0       	ldi	r25, 0x03	; 3
 92a:	0e 94 b9 01 	call	0x372	; 0x372 <fft_input>
		samplePos = 0;                   // Reset sample counter
 92e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <samplePos>
		ADCSRA |= _BV(ADIE);             // Resume sampling interrupt
 932:	f6 01       	movw	r30, r12
 934:	80 81       	ld	r24, Z
 936:	88 60       	ori	r24, 0x08	; 8
 938:	80 83       	st	Z, r24
		fft_execute(bfly_buff);          // Process complex data
 93a:	81 e3       	ldi	r24, 0x31	; 49
 93c:	91 e0       	ldi	r25, 0x01	; 1
 93e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <fft_execute>
		fft_output(bfly_buff, spectrum); // Complex -> spectrum
 942:	61 e3       	ldi	r22, 0x31	; 49
 944:	73 e0       	ldi	r23, 0x03	; 3
 946:	81 e3       	ldi	r24, 0x31	; 49
 948:	91 e0       	ldi	r25, 0x01	; 1
 94a:	0e 94 b2 02 	call	0x564	; 0x564 <fft_output>
		
		
		// Print the results+
		handleNewData(spectrum);		//convert the new data to fit 8x8 matrix
 94e:	81 e3       	ldi	r24, 0x31	; 49
 950:	93 e0       	ldi	r25, 0x03	; 3
 952:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <handleNewData>
 956:	a0 e1       	ldi	r26, 0x10	; 16
 958:	b1 e0       	ldi	r27, 0x01	; 1
 95a:	00 e2       	ldi	r16, 0x20	; 32
 95c:	11 e0       	ldi	r17, 0x01	; 1
 95e:	f8 01       	movw	r30, r16
		
		for(int j = 0; j < 8; j++){		//drop the level by one if no bigger peak is present in the new data
			if(newData[j] >= resultSpectrum[j]){
 960:	2d 91       	ld	r18, X+
 962:	3d 91       	ld	r19, X+
 964:	80 81       	ld	r24, Z
 966:	91 81       	ldd	r25, Z+1	; 0x01
 968:	28 17       	cp	r18, r24
 96a:	39 07       	cpc	r19, r25
 96c:	18 f0       	brcs	.+6      	; 0x974 <main+0x6c>
				resultSpectrum[j] = newData[j];	
 96e:	31 83       	std	Z+1, r19	; 0x01
 970:	20 83       	st	Z, r18
 972:	05 c0       	rjmp	.+10     	; 0x97e <main+0x76>
			}
			else if(resultSpectrum[j] != 0){
 974:	00 97       	sbiw	r24, 0x00	; 0
 976:	19 f0       	breq	.+6      	; 0x97e <main+0x76>
				resultSpectrum[j] -= 1;
 978:	01 97       	sbiw	r24, 0x01	; 1
 97a:	91 83       	std	Z+1, r25	; 0x01
 97c:	80 83       	st	Z, r24
 97e:	32 96       	adiw	r30, 0x02	; 2
		
		
		// Print the results+
		handleNewData(spectrum);		//convert the new data to fit 8x8 matrix
		
		for(int j = 0; j < 8; j++){		//drop the level by one if no bigger peak is present in the new data
 980:	ee 15       	cp	r30, r14
 982:	ff 05       	cpc	r31, r15
 984:	69 f7       	brne	.-38     	; 0x960 <main+0x58>
 986:	0f 2e       	mov	r0, r31
 988:	f0 e2       	ldi	r31, 0x20	; 32
 98a:	af 2e       	mov	r10, r31
 98c:	f1 e0       	ldi	r31, 0x01	; 1
 98e:	bf 2e       	mov	r11, r31
 990:	f0 2d       	mov	r31, r0
 992:	c0 e0       	ldi	r28, 0x00	; 0
 994:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		for (int j = 0; j < 2; j++){	//print twice in order to increase brightness
			for (int i = 0; i < 8; i++){
//				ledTest();				//uncomment to enable led test pattern
				printLed(i, resultSpectrum[i]);
 996:	f5 01       	movw	r30, r10
 998:	61 91       	ld	r22, Z+
 99a:	71 91       	ld	r23, Z+
 99c:	5f 01       	movw	r10, r30
 99e:	ce 01       	movw	r24, r28
 9a0:	0e 94 c9 03 	call	0x792	; 0x792 <printLed>
			}

		}
		
		for (int j = 0; j < 2; j++){	//print twice in order to increase brightness
			for (int i = 0; i < 8; i++){
 9a4:	21 96       	adiw	r28, 0x01	; 1
 9a6:	c8 30       	cpi	r28, 0x08	; 8
 9a8:	d1 05       	cpc	r29, r1
 9aa:	a9 f7       	brne	.-22     	; 0x996 <main+0x8e>
 9ac:	c0 e0       	ldi	r28, 0x00	; 0
 9ae:	d0 e0       	ldi	r29, 0x00	; 0
//				ledTest();				//uncomment to enable led test pattern
				printLed(i, resultSpectrum[i]);
 9b0:	f8 01       	movw	r30, r16
 9b2:	61 91       	ld	r22, Z+
 9b4:	71 91       	ld	r23, Z+
 9b6:	8f 01       	movw	r16, r30
 9b8:	ce 01       	movw	r24, r28
 9ba:	0e 94 c9 03 	call	0x792	; 0x792 <printLed>
			}

		}
		
		for (int j = 0; j < 2; j++){	//print twice in order to increase brightness
			for (int i = 0; i < 8; i++){
 9be:	21 96       	adiw	r28, 0x01	; 1
 9c0:	c8 30       	cpi	r28, 0x08	; 8
 9c2:	d1 05       	cpc	r29, r1
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <main+0xa8>
 9c6:	ad cf       	rjmp	.-166    	; 0x922 <main+0x1a>

000009c8 <_exit>:
 9c8:	f8 94       	cli

000009ca <__stop_program>:
 9ca:	ff cf       	rjmp	.-2      	; 0x9ca <__stop_program>
